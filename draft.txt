uCPU是在网络环境下的ucore操作系统中运行的内核模拟器。其主要功能是模拟CPU对MIPS32指令集代码的运行，在外面开来就像计算机真的在“运行”程序一样，实际是用软件逻辑来替代CPU硬件电路。由于要求在网络环境下运行，所以采用了相性较好的javascript语言来编写程序。
模拟器的性能要远逊于计算机内核，但是运行效率作为其次，作为代替，硬件内部的可见性，程序运行的跟踪性，以其发现缺陷后结构优化的便利性是其卖点。那么uCPU的设计和实现要遵循以上特点来进行。
	众所周知，CPU主要大模块包括译码器，运算器，寄存器，访存器，细分下来运算器还包括加法器和乘法器等等，寄存器包括一般寄存器，协寄存器，PC寄存器，访存器包括指令读，内存读以及内存写。uCPU继承了传统的CPU结构，又因为只是实现可视性，而不必认真按照严谨的硬件架构去实现。但是，模拟器在能够像内核一样运行程序的同时，还需额外实现以下功能：
（1）	设置断点，断点分为PC断点和寄存器断点。PC断点定义一个PC地址，程序运行到该PC地址时暂停。而寄存器断点定义了一个断点条件，当某个寄存器符合这个条件后运行暂停。
（2）	显示寄存器状态，将所有寄存器的值（包括协寄存器和PC）在屏幕中打印出来。一般是在断点暂停状态下进行显示。
（3）	显示系统栈内容。如有需要，可将栈中暂存的PC地址标记出来。
（4）	显示一段内存的内容。需给定内存的起始地址和终止地址。
（5）	将一段mips机器指令反译码为汇编指令并显示。


uCPU的内存是设在javascript环境下的一段预设数组中，数组储存的内容为32位整数。内存设置了与处理器相连的三个数据通路，分别用于指令的读取，数据的读取以及数据的写入。数据通路由32位的数据线，22位的地址线和读写使能构成。读写使能跟一般的RAM相比做了很大的简化。当写入数据时，直接将OE和WE置0，当读取数据时，将OE和RE置0。内存划分为指令区域，只读区域，读写区域以及IO缓存区域，指令存放的地址空间为0x0000~0x0fff（虚地址，下同），只能读取不能更改的地址空间为0x1000~0x2fff，自由读写的地址空间为0x3000~0xbeff，IO的缓存即串口缓存的地址为0xbf00,0xbf01,0xbf02,0xbf03。
实地址与虚地址之间的转换通过地址映射方法（静态）以及常规的由TLB寄存器储存的页表（动态）来配合实现。TLB的表项长度为64位，前22位为虚地址的前22位，后面依次跟着奇偶实地址对应的前22位和标志位。实虚地址转换的过程如下：
（1）	对输入的虚地址进行合法性检测，并触发虚地址非法异常。
（2）	静态方法和动态页表同时进行实地址生成。当动态页表缺失时触发TLB MISS异常，跳转到异常处理代码重填TLB。
uCPU的输入输出包括键盘的输入和屏幕的输出。键盘输入的字符存储于地址0xbf00（串口1），屏幕的输出为0xbf01（串口2）。

uCPU支持基于mips32指令集的标准子集下的指令的执行，指令集如下：
指令				  编码								功能
ADDIU rt rs imme  001001ssssstttttiiiiiiiiiiiiiiii  rt <- rs + sign_extend(imme)
ANDI  rt rs imme  001100ssssstttttiiiiiiiiiiiiiiii  rt <- rs & zero_extend(imme)
ORI   rt rs imme  001101ssssstttttiiiiiiiiiiiiiiii  rt <- rs | zero_extend(imme)
XORI  rt rs imme  001110ssssstttttiiiiiiiiiiiiiiii  rt <- rs ^ zero_extend(imme)
ADDU  rd rs rt	  000000ssssstttttddddd00000100001  rd <- rs + rt
SUBU  rd rs rt    000000ssssstttttddddd00000100011  rd <- rs - rt
AND   rd rs rt	  000000ssssstttttddddd00000100100  rd <- rs & rt
OR    rd rs rt    000000ssssstttttddddd00000100101  rd <- rs | rt
XOR   rd rs rt    000000ssssstttttddddd00000100110  rd <- rs ^ rt
NOR   rd rs rt    000000ssssstttttddddd00000100111  rd <- ~(rs | rt)
MULT  rs rt       000000sssssttttt0000000000011000  lo <- (rs * rt) >> 32,  hi <- (rs * rt) & 65535
DIV   rs rt       000000sssssttttt0000000000011010  lo <- rs / rt,  hi <- rs % rt
SLL   rd rt imme  00000000000tttttdddddiiiii000000  rd <- rt sll imme
SRL   rd rt imme  00000000000tttttdddddiiiii000010  rd <- rt srl imme
SRA   rd rt imme  00000000000tttttdddddiiiii000011  rd <- rt sra imme
SLLV  rd rt rs    000000ssssstttttddddd00000000100  rd <- rt sll rs
SRLV  rd rt rs    000000ssssstttttddddd00000000110  rd <- rt srl rs
SRAV  rd rt rs    000000ssssstttttddddd00000000111  rd <- rt sra rs

BLTZ  rs imme     000001sssss00000iiiiiiiiiiiiiiii  if (rs < 0)   PC <- PC + sign_extend(imme)
BGEZ  rs imme     000001sssss00001iiiiiiiiiiiiiiii  if (rs >= 0)  PC <- PC + sign_extend(imme)
BEQ   rs rt imme  000100ssssstttttiiiiiiiiiiiiiiii  if (rs == rt) PC <- PC + sign_extend(imme)
BNE   rs rt	imme  000101ssssstttttiiiiiiiiiiiiiiii  if (rs != rt) PC <- PC + sign_extend(imme)
BLEZ  rs imme     000110sssss00000iiiiiiiiiiiiiiii  if (rs <= 0)  PC <- PC + sign_extend(imme)
BGTZ  rs imme	  000111sssss00000iiiiiiiiiiiiiiii  if (rs > 0)   PC <- PC + sign_extend(imme)

J     imme        000010iiiiiiiiiiiiiiiiiiiiiiiiii  PC <- sign_extend(imme)
JAL   imme        000011iiiiiiiiiiiiiiiiiiiiiiiiii  PC <- sign_extend(imme), ra <- RPC
JR    rs		  000000sssss000000000000000001000  PC <- rs
JALR  rs rd		  000000sssss00000ddddd00000001001  PC <- rs, rd <- RPC

SLT   rd rs rt	  000000ssssstttttddddd00000101010  rd <- (rs < rt) (sign_compare)
SLTU  rd rs rt    000000ssssstttttddddd00000101011  rd <- (rs < rt) (unsign_compare)
SLTI  rt rs imme  001010ssssstttttiiiiiiiiiiiiiiii  rt <- (rs < sign_extend(imme)) (sign_compare)
SLTIU rt rs imme  001011ssssstttttiiiiiiiiiiiiiiii  rt <- (rs < zero_extend(imme)) (unsign_compare)

MFLO  rd		  0000000000000000ddddd00000010010  rd <- lo
MFHI  rd		  0000000000000000ddddd00000010000  rd <- hi
MTLO  rd		  0000000000000000ddddd00000010011  lo <- rd
MTHI  rd		  0000000000000000ddddd00000010001  hi <- rd
MFC0  rt rd		  01000000000tttttddddd00000000000  rt <- cp0[rd]
MTC0  rt rd       01000000100tttttddddd00000000000  cp0[rd] <- rt

LB    rt rs imme  100000ssssstttttiiiiiiiiiiiiiiii  sign_extend(rt <- MEM[rs+sign_extend(imme)] & 255)
LBU   rt rs imme  100100ssssstttttiiiiiiiiiiiiiiii  zero_extend(rt <- MEM[rs+sign_extend(imme)] & 255)
LH    rt rs imme  100001ssssstttttiiiiiiiiiiiiiiii  sign_extend(rt <- MEM[rs+sign_extend(imme)] & 65535)
LHU   rt rs imme  100101ssssstttttiiiiiiiiiiiiiiii  zero_extend(rt <- MEM[rs+sign_extend(imme)] & 65535)
LW    rt rs imme  100011ssssstttttiiiiiiiiiiiiiiii  rt <- MEM[rs+sign_extend(imme)]
SB    rt rs imme  101000ssssstttttiiiiiiiiiiiiiiii  MEM[rs+sign_extend(imme)] <- MEM[rs+sign_extend(imme)] & ~(255) | (rt & 255)
SW    rt rs imme  101011ssssstttttiiiiiiiiiiiiiiii  MEM[rs+sign_extend(imme)] <- rt

SYSCALL           00000000000000000000000000001100  system call
ERET			  01000010000000000000000000000000  PC <- cp0[EPC], cp0_status <- cp0_status & ~(1<<EXL)
TLBWI			  01000010000000000000000000000010  write TLB table item in special index.

中断/异常协 理的一般流程如下:
(1)		保存中断信息,主要是 EPC,BadVAddr,Status,Cause 等寄存器的信息。
EPC:存储异常协理之后程序恢复执行的地址。选于一般异常,当前开生错错的指令地址即为EPC应当保存的地址;而选于硬件中断,由于是异步产生则可以任意设定一条并未执行完成的指令地址保存,但在进 入下一步协理之前,该指令前的指令都应当被执行完。
BadVAddr:捕捉最近一次地址错或TLB异常(重填、失效、修改)时的虚拟地址。 
Status:将EXL位置为1,进入kernel模式进行中断协理
Cause:记下异常号。
EnrtyHi:tlb异常时,记记下BadVAddr的部分高位。
(2)		根据Cause中的异常号跳转到相应的异常协理函数入口
(3)		中断协理
(4)		通过调用ERET指令恢复实复, 返回EPC所存地址执行并且将Status中的EXL重置为0表示进入user模式。

uComplier是在网络环境的ucore操作系统下运行的c语言的编译器，主要功能是将c语言代码转换为mips32机器指令码（跳过汇编生成）。其主要步骤分为3部分：词义分析，语义分析，指令生成。
词义分析是识别出原代码中的所有保留字，符号和名称，标记为token保存于哈希表中，并进行括号匹配和数字匹配等合法性检查。与原版编译器实现不同，js中有很方便的字符串正则匹配算法，可以用正则表达式”(.?)”来进行括号匹配，”[0-9]+”（整数），”[0-9]+\.?[0-9]+”（浮点数）和”0x[0-9|a-f|A-F]{8}”（hex表示的32位整数）进行数字匹配
C语言的文法如下：
	code := NULL | stmt code
	stmt := {code} | type name; | type name = expr; | expr; | 
if (expr) stmt | if (expr) stmt else stmt | for (expr;expr;expr) stmt |
while (expr) stmt | switch (expr) { case value : code case value : code … default : code} 
	expr := variable = expr | type(expr,expr,…) | func(expr, expr, …) | expr op_middle expr | op_left expr | expr op_right
	func_define := type func(type name, type name,…);
	func_content := type func(type name, type name,…) {code}
	type_define := class|struct type {type_content};
	type_content := NULL | type name; type_content | func_define type_content
	vari_define := type name; | type name = expr;
	main := void main(int argc, char* argv) {code}
	可以基于js自带的括号匹配，进行自上而下的词义分析。要注意的是括号内部的所有非保留字名称需加上括号名称的前缀，例如函数main中的变量i的实际名称为main@i。需最后生成简化的token序列，其中每个左括号都标记右括号的位置，以便于接下来的语义分析。
	在词义分析的基础上，语义分析的最终目的是生成代码逻辑的表达树。可根据上面的文法来自上而下构造表达树，大体上会是如下形式：
	0: value:c_begin
1: value:type_define token:… content:7  
2: value:func_define token:… parameter:…
3: value:func_content define:… content:…
4: value:vari_define token:… value:…
5: value:func_main content:…
6: value:c_end
7: value:type_content_begin
8: value:vari_define token:…
9: value:func_define token:… parameter:…
10:value: type_content_end
11:value:func_content_begin
…….
37:value:func_content_end
代码生成可直接遵循表达树。要注意的是条件结构和循环结构，可将if在指令中改为unless形式，不符合条件是直接跳转到下一语句。while循环拆解为if+repeat的形式，repeat在执行末尾进行条件转移。以下为每类程序结构对应的生成方法：
variable = expr;  
1.	Calculate the value of expr.
2.	Store the value in memory.

type name; (add a partial variable)
	Do nothing about instruction, but remains a space of stack to store the partial variable.

type name; (add a global variable)
	Do nothing about instruction, but split a static variable memory from RAM.

if (expr1) then stmt1 else stmt2
1.	Calculate the value of expr1 and store in register 1.
2.	Use the instruction BETZ to skip stmt1 if expr1 is False.
3.	At the end of stmt1 and stmt2, Use the instruction B to branch to the next statement.

do stmt while (expr)
1.	At the end of this statement, Calculate expr and use the instruction BNEZ to restart the loop.
	
while (Expr) stmt
1.	Seem as “if (expr) {do stmt while(expr)}” 

for (expr1;expr2;expr3) stmt
1.	Seem as “expr1;while(expr2) {stmt expr3}”

switch case
1.	Seem as “if … else if … … else …”.

Call function(procedure)
	1.	Push all the parameters to system stack. 
2.	Push the current PC.
3.	Use the instruction J to jump to function’s heading address.
4.	Pop all the parameters.

return value
1.	Move the value to a special register.
2.	Pop the current PC.(Store in another special register)
3.	Use the instruct JR to return to last procedure.

Call an object’s function
1.	Push all the parameters.
2.	Push this object’s heading address(seem as a parameter).
3.	Push the current PC.
4.	Use the instruction J to jump to function’s heading address.
5.	Pop all the parameters.(include object address)



代码生成时要注意的是，在表达树中每个节点需对应实际的指令地址，那么对于条件转移branch，在生成的时候可先搁置，最后确定所有节点的指令地址后再生成。


